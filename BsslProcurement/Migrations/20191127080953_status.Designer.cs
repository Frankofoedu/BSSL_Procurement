// <auto-generated />
using System;
using DcProcurement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BsslProcurement.Migrations
{
    [DbContext(typeof(ProcurementDBContext))]
    [Migration("20191127080953_status")]
    partial class status
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DcProcurement.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("DcProcurement.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disqualified")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfBusiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("DcProcurement.CompanyInfoProcurementSubCategory", b =>
                {
                    b.Property<int>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ProcurementSubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("CompanyInfoId", "ProcurementSubcategoryId");

                    b.HasIndex("ProcurementSubcategoryId");

                    b.ToTable("CompanyInfoProcurementSubCategory");
                });

            modelBuilder.Entity("DcProcurement.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CriteriaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MinValue")
                        .HasColumnType("int");

                    b.Property<bool>("NeedsDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("isCompulsory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Criterias");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Criteria");
                });

            modelBuilder.Entity("DcProcurement.EquipmentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("EquipmentDetails");
                });

            modelBuilder.Entity("DcProcurement.ExperienceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("ExperienceRecord");
                });

            modelBuilder.Entity("DcProcurement.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcurementSubcategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementSubcategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DcProcurement.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkFlowStep")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Jobs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Job");
                });

            modelBuilder.Entity("DcProcurement.PRNo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastUsedSerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PRNos");
                });

            modelBuilder.Entity("DcProcurement.PersonnelDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("PersonnelDetails");
                });

            modelBuilder.Entity("DcProcurement.PrequalificationPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NoOfCategory")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrequalificationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PrequalificationStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PrequalificationPolicies");
                });

            modelBuilder.Entity("DcProcurement.ProcurementCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcurementCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcurementCategories");
                });

            modelBuilder.Entity("DcProcurement.ProcurementGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfCategory")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProcurementGroups");
                });

            modelBuilder.Entity("DcProcurement.ProcurementItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcurementGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcurementSubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProcurementGroupId");

                    b.HasIndex("ProcurementSubcategoryId");

                    b.ToTable("ProcurementItems");
                });

            modelBuilder.Entity("DcProcurement.ProcurementPortalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Legal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcurementPortalInfo");
                });

            modelBuilder.Entity("DcProcurement.ProcurementSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcurementCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProcurementSubCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProcurementCategoryId");

                    b.ToTable("ProcurementSubcategories");
                });

            modelBuilder.Entity("DcProcurement.Requisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ERFx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparedByRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparedFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparedForRank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcurementMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcurementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredAtDepartment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPriced")
                        .HasColumnType("bit");

                    b.Property<bool>("isSubmitted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Requisitions");

                    b.HasData(
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2019, 11, 27, 9, 9, 52, 147, DateTimeKind.Local).AddTicks(69),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryDate = new DateTime(2019, 11, 27, 9, 9, 52, 148, DateTimeKind.Local).AddTicks(5096),
                            Description = "sample requisition",
                            PRNumber = "000222",
                            PreparedBy = "John O",
                            PreparedByRank = "HOD",
                            PreparedFor = "Abbah",
                            PreparedForRank = "Hod",
                            Purpose = "For general stores",
                            RequesterType = "Division",
                            RequesterValue = "kkkkkd",
                            RequiredAtDepartment = "head office",
                            isPriced = false,
                            isSubmitted = true
                        });
                });

            modelBuilder.Entity("DcProcurement.RequisitionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RequisitionId")
                        .HasColumnType("int");

                    b.Property<string>("StoreItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasurement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("RequisitionId");

                    b.HasIndex("VendorId");

                    b.ToTable("RequisitionItems");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Description = "biro",
                            Quantity = 22,
                            RequisitionId = 22,
                            StoreItemCode = "22",
                            UnitPrice = 0.0
                        });
                });

            modelBuilder.Entity("DcProcurement.SubmittedCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("SubmittedCriteria");
                });

            modelBuilder.Entity("DcProcurement.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("DcProcurement.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowActionId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffId1");

                    b.HasIndex("WorkflowActionId");

                    b.HasIndex("WorkflowTypeId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("DcProcurement.WorkflowAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkflowActions");
                });

            modelBuilder.Entity("DcProcurement.WorkflowStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowStaffs");
                });

            modelBuilder.Entity("DcProcurement.WorkflowType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkflowTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DcProcurement.CategoryCriteria", b =>
                {
                    b.HasBaseType("DcProcurement.Criteria");

                    b.Property<int?>("ProcurementCategoryId")
                        .HasColumnType("int");

                    b.HasIndex("ProcurementCategoryId");

                    b.HasDiscriminator().HasValue("CategoryCriteria");
                });

            modelBuilder.Entity("DcProcurement.ItemCriteria", b =>
                {
                    b.HasBaseType("DcProcurement.Criteria");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasIndex("ItemId");

                    b.HasDiscriminator().HasValue("ItemCriteria");
                });

            modelBuilder.Entity("DcProcurement.SubCategoryCriteria", b =>
                {
                    b.HasBaseType("DcProcurement.Criteria");

                    b.Property<int?>("ProcurementSubcategoryId")
                        .HasColumnType("int");

                    b.HasIndex("ProcurementSubcategoryId");

                    b.HasDiscriminator().HasValue("SubCategoryCriteria");
                });

            modelBuilder.Entity("DcProcurement.PrequalificationJob", b =>
                {
                    b.HasBaseType("DcProcurement.Job");

                    b.Property<int>("CompanyInfoId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("StaffId1");

                    b.HasDiscriminator().HasValue("PrequalificationJob");
                });

            modelBuilder.Entity("DcProcurement.Staff", b =>
                {
                    b.HasBaseType("DcProcurement.User");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("DcProcurement.VendorUser", b =>
                {
                    b.HasBaseType("DcProcurement.User");

                    b.Property<int?>("CompanyInfoId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyInfoId")
                        .IsUnique()
                        .HasFilter("[CompanyInfoId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("VendorUser");
                });

            modelBuilder.Entity("DcProcurement.CompanyInfoProcurementSubCategory", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("CompanyInfoSelectedSubcategory")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DcProcurement.ProcurementSubcategory", "ProcurementSubcategory")
                        .WithMany("CompanyInfos")
                        .HasForeignKey("ProcurementSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.EquipmentDetails", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("EquipmentDetails")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.ExperienceRecord", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("ExperienceRecords")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.Item", b =>
                {
                    b.HasOne("DcProcurement.ProcurementSubcategory", "ProcurementSubcategory")
                        .WithMany()
                        .HasForeignKey("ProcurementSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.Job", b =>
                {
                    b.HasOne("DcProcurement.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("DcProcurement.PersonnelDetails", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("PersonnelDetails")
                        .HasForeignKey("CompanyInfoId");
                });

            modelBuilder.Entity("DcProcurement.ProcurementItem", b =>
                {
                    b.HasOne("DcProcurement.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("DcProcurement.ProcurementGroup", "ProcurementGroup")
                        .WithMany("ProcurementItems")
                        .HasForeignKey("ProcurementGroupId");

                    b.HasOne("DcProcurement.ProcurementSubcategory", null)
                        .WithMany("ProcurementItems")
                        .HasForeignKey("ProcurementSubcategoryId");
                });

            modelBuilder.Entity("DcProcurement.ProcurementSubcategory", b =>
                {
                    b.HasOne("DcProcurement.ProcurementCategory", "ProcurementCategory")
                        .WithMany("ProcurementSubcategories")
                        .HasForeignKey("ProcurementCategoryId");
                });

            modelBuilder.Entity("DcProcurement.RequisitionItem", b =>
                {
                    b.HasOne("DcProcurement.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("DcProcurement.Requisition", "Requisition")
                        .WithMany("RequisitionItems")
                        .HasForeignKey("RequisitionId");

                    b.HasOne("DcProcurement.VendorUser", "Vendor")
                        .WithMany("RequisitionItems")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("DcProcurement.SubmittedCriteria", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("SubmittedCriterias")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DcProcurement.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.Workflow", b =>
                {
                    b.HasOne("DcProcurement.Staff", null)
                        .WithMany("AdditionalStaffWorkflows")
                        .HasForeignKey("StaffId");

                    b.HasOne("DcProcurement.Staff", null)
                        .WithMany("StaffWorkflows")
                        .HasForeignKey("StaffId1");

                    b.HasOne("DcProcurement.WorkflowAction", "WorkflowAction")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowActionId");

                    b.HasOne("DcProcurement.WorkflowType", "WorkflowType")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowTypeId");
                });

            modelBuilder.Entity("DcProcurement.WorkflowStaff", b =>
                {
                    b.HasOne("DcProcurement.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("DcProcurement.Workflow", "Workflow")
                        .WithMany("Staffs")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DcProcurement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DcProcurement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DcProcurement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DcProcurement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DcProcurement.CategoryCriteria", b =>
                {
                    b.HasOne("DcProcurement.ProcurementCategory", "ProcurementCategory")
                        .WithMany("CategoryCriterias")
                        .HasForeignKey("ProcurementCategoryId");
                });

            modelBuilder.Entity("DcProcurement.ItemCriteria", b =>
                {
                    b.HasOne("DcProcurement.Item", "Item")
                        .WithMany("ItemCriterias")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("DcProcurement.SubCategoryCriteria", b =>
                {
                    b.HasOne("DcProcurement.ProcurementSubcategory", "ProcurementSubcategory")
                        .WithMany("SubCategoryCriterias")
                        .HasForeignKey("ProcurementSubcategoryId");
                });

            modelBuilder.Entity("DcProcurement.PrequalificationJob", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithMany("PrequalificationJobs")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DcProcurement.Staff", null)
                        .WithMany("AssignedPrequalificationJobs")
                        .HasForeignKey("StaffId1");
                });

            modelBuilder.Entity("DcProcurement.VendorUser", b =>
                {
                    b.HasOne("DcProcurement.CompanyInfo", "CompanyInfo")
                        .WithOne("Vendor")
                        .HasForeignKey("DcProcurement.VendorUser", "CompanyInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
